{"version":3,"sources":["context/index.ts"],"names":[],"mappings":"AAAA,iCAAiC;AAEjC,OAAO,EAA0C,SAAS,IAAI,UAAU,EAAE,MAAM,OAAO,CAAC;AAExF,qBAAqB;AACrB,MAAM,EACL,mBAAmB,EACnB,iBAAiB,EACjB,mBAAmB,EACnB,yBAAyB,EACzB,GAAE,UAAU,CAAC;AAKd;;GAEG;AACH,MAAM,OAAO;IASZ,YAAY,MAAyB,EAAE,OAA4B,EAAE,KAAa,EAAE,UAAoB;QACvG,IAAI,CAAC,MAAM,GAAE,MAAM,CAAC;QACpB,IAAI,CAAC,OAAO,GAAE,OAAO,CAAC;QACtB,IAAI,CAAC,KAAK,GAAE,KAAK,CAAC;QAClB,IAAI,CAAC,UAAU,GAAE,UAAU,CAAC;IAC7B,CAAC;IAED,4BAA4B;IAC5B,IAAI,OAAO,KAAI,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAA,CAAC,CAAC;IAC3C,uBAAuB;IACvB,IAAI,MAAM,KAAI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA,CAAC,CAAC;IACzC,oBAAoB;IACpB,IAAI,SAAS,KAAI,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAA,CAAC,CAAC;IAC/C,sBAAsB;IACtB,IAAI,WAAW,KAAI,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAA,CAAC,CAAC;IACnD,oBAAoB;IACpB,IAAI,EAAE,KAAI,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAElC,iBAAiB;IACjB,IAAI,MAAM,KAAI,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA,CAAC,CAAC;IACxD,IAAI,IAAI,KAAI,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAA,CAAC,CAAC;IACpD,IAAI,MAAM,KAAI,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA,CAAC,CAAC;IACxD,IAAI,WAAW,KAAI,OAAO,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAA,CAAA,CAAC;IAElE,oCAAoC;IACpC,IAAI,WAAW,KAAI,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;IAGpD,mBAAmB;IACnB,KAAK,CAAC,IAAa;QAClB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;IACb,CAAC;IAED,qBAAqB;IACrB,UAAU,CAAC,KAAa,EAAE,QAAuB,IAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;IAG9F,0BAA0B;IAC1B,EAAE,CAAC,KAAoB,EAAE,QAAsB;QAC9C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;IACb,CAAC;IACD,kBAAkB;IAClB,IAAI,CAAC,KAAoB,EAAE,QAAsB;QAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC;IACb,CAAC;IACD,iBAAiB;IACjB,IAAI,CAAC,KAAsB,EAAE,GAAG,IAAW;QAC1C,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IACzC,CAAC;IACD,2BAA2B;IAC3B,SAAS,CAAC,KAAoB;QAC7B,OAAO,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAC,EAAE;YAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACJ,CAAC;CACD","file":"index.js","sourcesContent":["/// <reference path=\"files.ts\" />\r\n\r\nimport { IncomingHttpHeaders, ServerHttp2Stream, constants as HTTP_CONST } from 'http2';\r\n\r\n/** HTTP constants */\r\nconst {\r\n\tHTTP2_HEADER_METHOD,\r\n\tHTTP2_HEADER_PATH,\r\n\tHTTP2_HEADER_SCHEME,\r\n\tHTTP2_HEADER_CONTENT_TYPE\r\n}= HTTP_CONST;\r\n\r\n//* Types\r\ntype VoidCallback= (...args: any[])=> void\r\n\r\n/**\r\n * Context file\r\n */\r\nclass Context{\r\n\t// Unlerlining Http2Stream\r\n\treadonly stream: ServerHttp2Stream;\r\n\t/** Incomming headers */\r\n\treadonly headers: IncomingHttpHeaders;\r\n\treadonly flags: number\r\n\t/** Incomming raw headers */\r\n\treadonly rawHeaders: string[];\r\n\r\n\tconstructor(stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number, rawHeaders: string[]){\r\n\t\tthis.stream= stream;\r\n\t\tthis.headers= headers;\r\n\t\tthis.flags= flags;\r\n\t\tthis.rawHeaders= rawHeaders;\r\n\t}\r\n\r\n\t/** If the stream aborted */\r\n\tget aborted(){ return this.stream.aborted }\r\n\t/** If stream closed */\r\n\tget closed(){ return this.stream.closed }\r\n\t/** If desctroyed */\r\n\tget destroyed(){ return this.stream.destroyed }\r\n\t/** If headers sent */\r\n\tget headersSent(){ return this.stream.headersSent }\r\n\t/** Get stream id */\r\n\tget id(){ return this.stream.id; }\r\n\r\n\t/** Get Method */\r\n\tget method(){ return this.headers[HTTP2_HEADER_METHOD] }\r\n\tget path(){ return this.headers[HTTP2_HEADER_PATH] }\r\n\tget scheme(){ return this.headers[HTTP2_HEADER_SCHEME] }\r\n\tget contentType(){ return this.headers[HTTP2_HEADER_CONTENT_TYPE]}\r\n\r\n\t/** Sent header: outbound headers */\r\n\tget sentHeaders(){ return this.stream.sentHeaders; }\r\n\r\n\r\n\t/** Close stream */\r\n\tclose(code?: number){\r\n\t\tthis.stream.close(code);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Stream timeout */\r\n\tsetTimeout(msecs: number, callback?: VoidCallback){ this.stream.setTimeout(msecs, callback); }\r\n\r\n\t\r\n\t/** Listeners on stream */\r\n\ton(event: string|symbol, listener: VoidCallback): this{\r\n\t\tthis.stream.on(event, listener);\r\n\t\treturn this;\r\n\t}\r\n\t/** Listen once */\r\n\tonce(event: string|symbol, listener: VoidCallback): this{\r\n\t\tthis.stream.once(event, listener);\r\n\t\treturn this;\r\n\t}\r\n\t/** Emit event */\r\n\temit(event: string | symbol, ...args: any[]): boolean{\r\n\t\treturn this.stream.emit(event, ...args);\r\n\t}\r\n\t/** Await for event once */\r\n\tawaitOnce(event: string|symbol){\r\n\t\treturn new Promise((res, rej)=>{\r\n\t\t\tthis.stream.once(event, res);\r\n\t\t});\r\n\t}\r\n}"]}